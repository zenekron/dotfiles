# vim: nofoldenable

#
# operators - https://en.cppreference.com/w/cpp/language/operators
#

# assignment - https://en.cppreference.com/w/cpp/language/operator_assignment
snippet op=i simple assignment `a = b` (inside class)
	inline ${1:T}& operator =(const ${3:U}& ${4:b}) { $9 }
snippet op+=i addition assignment `a += b` (inside class)
	inline ${1:T}& operator +=(const ${3:U}& ${4:b}) { $9 }
snippet op+=o addition assignment `a += b` (outside class)
	${1:T}& operator +=($1& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op-=i subtraction assignment `a -= b` (inside class)
	inline ${1:T}& operator -=(const ${3:U}& ${4:b}) { $9 }
snippet op-=o subtraction assignment `a -= b` (outside class)
	${1:T}& operator -=($1& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op*=i multiplication assignment `a *= b` (inside class)
	inline ${1:T}& operator *=(const ${3:U}& ${4:b}) { $9 }
snippet op*=o multiplication assignment `a *= b` (outside class)
	${1:T}& operator *=($1& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op/=i division assignment `a /= b` (inside class)
	inline ${1:T}& operator /=(const ${3:U}& ${4:b}) { $9 }
snippet op/=o division assignment `a /= b` (outside class)
	${1:T}& operator /=($1& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op%=i remainder assignment `a %= b` (inside class)
	inline ${1:T}& operator %=(const ${3:U}& ${4:b}) { $9 }
snippet op%=o remainder assignment `a %= b` (outside class)
	${1:T}& operator %=($1& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op&=i bitwise AND assignment `a &= b` (inside class)
	inline ${1:T}& operator &=(const ${3:U}& ${4:b}) { $9 }
snippet op&=o bitwise AND assignment `a &= b` (outside class)
	${1:T}& operator &=($1& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op|=i bitwise OR assignment `a |= b` (inside class)
	inline ${1:T}& operator |=(const ${3:U}& ${4:b}) { $9 }
snippet op|=o bitwise OR assignment `a |= b` (outside class)
	${1:T}& operator |=($1& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op^=i bitwise XOR assignment `a ^= b` (inside class)
	inline ${1:T}& operator ^=(const ${3:U}& ${4:b}) { $9 }
snippet op^=o bitwise XOR assignment `a ^= b` (outside class)
	${1:T}& operator ^=($1& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op<<=i bitwise left shift assignment `a <<= b` (inside class)
	inline ${1:T}& operator <<=(const ${3:U}& ${4:b}) { $9 }
snippet op<<=o bitwise left shift assignment `a <<= b` (outside class)
	${1:T}& operator <<=($1& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op>>=i bitwise right shift assignment `a >>= b` (inside class)
	inline ${1:T}& operator >>=(const ${3:U}& ${4:b}) { $9 }
snippet op>>=o bitwise right shift assignment `a >>= b` (outside class)
	${1:T}& operator >>=($1& ${2:a}, const ${3:U}& ${4:b}) { $9 }

# increment/decrement - https://en.cppreference.com/w/cpp/language/operator_incdec
snippet op++i pre-increment `++a` (inside class)
	inline ${1:T}& operator++() { $9 }
snippet op++o pre-increment `++a` (outside class)
	${1:T}& operator++($1& ${2:a}) { $9 }
snippet op--i pre-decrement `--a` (inside class)
	inline ${1:T}& operator--() { $9 }
snippet op--i pre-decrement `--a` (outside class)
	${1:T}& operator--($1& ${2:a}) { $9 }
snippet op++i post-increment `a++` (inside class)
	inline ${1:T} operator++(int) { $9 }
snippet op++o post-increment `a++` (outside class)
	${1:T} operator++($1& ${2:a}, int) { $9 }
snippet op--i post-decrement `a--` (inside class)
	inline ${1:T} operator--(int) { $9 }
snippet op--o post-decrement `a--` (outside class)
	${1:T} operator--($1& ${2:a}, int) { $9 }

# arithmetic - https://en.cppreference.com/w/cpp/language/operator_arithmetic
snippet op+i Unary plus `+a` (inside class)
	inline ${1:T} operator+() const { $9 }
snippet op+o Unary plus `+a` (outside class)
	${1:T} operator+(const $1& ${2:a}) { $9 }
snippet op-i Unary minus `-a` (inside class)
	inline ${1:T} operator-() const { $9 }
snippet op-o Unary minus `-a` (outside class)
	${1:T} operator-(const $1& ${2:a}) { $9 }
snippet op+i Addition `a + b` (inside class)
	inline ${1:T} operator+(const ${3:U}& ${4:b}) const { $9 }
snippet op+o Addition `a + b` (outside class)
	${1:T} operator+(const $1& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op-i Subtraction `a - b` (inside class)
	inline ${1:T} operator-(const ${3:U}& ${4:b}) const { $9 }
snippet op-o Subtraction `a - b` (outside class)
	${1:T} operator-(const $1& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op*i Multiplication `a * b` (inside class)
	inline ${1:T} operator*(const ${3:U}& ${4:b}) const { $9 }
snippet op*o Multiplication `a * b` (outside class)
	${1:T} operator*(const $1& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op/i Division `a / b` (inside class)
	inline ${1:T} operator/(const ${3:U}& ${4:b}) const { $9 }
snippet op/o Division `a / b` (outside class)
	${1:T} operator/(const $1& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op&i Remainder `a % b` (inside class)
	inline ${1:T} operator%(const ${3:U}& ${4:b}) const { $9 }
snippet op&o Remainder `a % b` (outside class)
	${1:T} operator%(const $1& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op~i Bitwise NOT `~a` (inside class)
	inline ${1:T} operator~() const { $9 }
snippet op~o Bitwise NOT `~a` (outside class)
	${1:T} operator~(const $1& ${2:a}) { $9 }
snippet op&i Bitwise AND `a & b` (inside class)
	inline ${1:T} operator&(const ${3:U}& ${4:b}) const { $9 }
snippet op&o Bitwise AND `a & b` (outside class)
	${1:T} operator&(const $1& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op|i Bitwise OR `a | b` (inside class)
	inline ${1:T} operator|(const ${3:U}& ${4:b}) const { $9 }
snippet op|o Bitwise OR `a | b` (outside class)
	${1:T} operator|(const $1& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op^i Bitwise XOR `a ^ b` (inside class)
	inline ${1:T} operator^(const ${3:U}& ${4:b}) const { $9 }
snippet op^o Bitwise XOR `a ^ b` (outside class)
	${1:T} operator^(const $1& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op<<i Bitwise left shift `a << b` (inside class)
	inline ${1:T} operator<<(const ${3:U}& ${4:b}) const { $9 }
snippet op<<o Bitwise left shift `a << b` (outside class)
	${1:T} operator<<(const $1& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op>>i Bitwise right shift `a >> b` (inside class)
	inline ${1:T} operator>>(const ${3:U}& ${4:b}) const { $9 }
snippet op>>o Bitwise right shift `a >> b` (outside class)
	${1:T} operator>>(const $1& ${2:a}, const ${3:U}& ${4:b}) { $9 }

# logical - https://en.cppreference.com/w/cpp/language/operator_logical
snippet opi negation `not a`, `!a` (inside class)
	inline bool operator!() const;
snippet opo negation `not a`, `!a` (outside class)
	bool operator!(const ${1:T} &${2:a});
snippet opi AND `a and b`, `a && b` (inside class)
	inline bool operator&&(const ${3:U} &${4:b}) const;
snippet opo AND `a and b`, `a && b` (outside class)
	bool operator&&(const ${1:T} &${2:a}, const ${3:U} &${4:b});
snippet opi inclusive OR `a or b`, `a || b` (inside class)
	inline bool operator||(const ${3:U} &${4:b}) const;
snippet opo inclusive OR `a or b`, `a || b` (outside class)
	bool operator||(const ${1:T} &${2:a}, const ${3:U} &${4:b});

# comparison - https://en.cppreference.com/w/cpp/language/operator_comparison
snippet op==i Equal to `a == b` (inside class)
	inline bool operator==(const ${3:U}& ${4:b}) const { $9 }
snippet op==o Equal to `a == b` (outside class)
	bool operator==(const ${1:T}& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op!=i Not equal to `a != b` (inside class)
	inline bool operator!=(const ${3:U}& ${4:b}) const { $9 }
snippet op!=o Not equal to `a != b` (outside class)
	bool operator!=(const ${1:T}& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op<i Less than `a < b` (inside class)
	inline bool operator<(const ${3:U}& ${4:b}) const { $9 }
snippet op<o Less than `a < b` (outside class)
	bool operator<(const ${1:T}& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op>i Greater than `a > b` (inside class)
	inline bool operator>(const ${3:U}& ${2:a}) const { $9 }
snippet op>o Greater than `a > b` (outside class)
	bool operator>(const ${1:T}& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op<=i Less than or equal to `a <= b` (inside class)
	inline bool operator<=(const ${3:U}& ${4:b}) const { $9 }
snippet op<=o Less than or equal to `a <= b` (outside class)
	bool operator<=(const ${1:T}& ${2:a}, const ${3:U}& ${4:b}) { $9 }
snippet op>=i Greater than or equal to `a >= b` (inside class)
	inline bool operator>=(const ${3:U}& ${4:b}) const { $9 }
snippet op>=o Greater than or equal to `a >= b` (outside class)
	bool operator>=(const ${1:T}& ${2:a}, const ${3:U}& ${4:b}) { $9 }

# member access
snippet op[]i subscript `a[b]` (inside class)
	inline ${1:R}& operator[](${2:U} ${3:b}) { $9 }
snippet op*i indirection `*a` (inside class)
	inline ${1:R}& operator*() { $9 }
snippet op*o indirection `*a` (outside class)
	${1:R}& operator*(${2:T} ${3:a}) { $9 }
snippet op&i address-of `&a` (inside class)
	inline ${1:R}* operator&() { $9 }
snippet op&o address-of `&a` (outside class)
	${1:R}* operator&(${2:T} ${3:a}) { $9 }
snippet op->i member of pointer `a->b` (inside class)
	inline ${1:R}* operator->() { $9 }
snippet op->*i pointer to member of pointer `a->*b` (inside class)
	inline ${1:R}& operator->*(${2:U} ${3:b}) { $9 }
snippet op->*i pointer to member of pointer `a->*b` (outside class)
	${1:R}& operator->*(${2:T} ${3:a}, ${4:U} ${5:b}) { $9 }

# other - https://en.cppreference.com/w/cpp/language/operator_other
snippet op() Function call `a(a1, a2)`
	inline ${1:R} operator()(${2}) { $9 }
snippet op,i Comma `a,  b` (inside class)
	${1:U}& operator,(${1:U} &${2:b}) { $9 }
snippet op,o Comma `a,  b` (outside class)
	${1:U}& operator,(const ${2:T} &${3:a}, $U &${4:b}) { $9 }

# custom
snippet op<<s
	std::ostream& operator<<(std::ostream& ${1:out}, const ${2:T}& ${3:b}) { $9 }
snippet op>>s
	std::istream& operator>>(std::istream& ${1:in}, ${2:T}& ${3:b}) { $9 }



#
# std
#

snippet stdhash
	struct std::hash<${1:T}> {
		inline size_t operator()(const $1& ${2:value}) const { $9 }
	};



#
# class methods
#

snippet getter
	inline const ${1:T}& get_${2:name}() const noexcept { return this->$4; }

snippet setter
	inline void set_${2:T}(${1:name} ${3:value}) noexcept { this->$4 = std::move($3); }

snippet getset
	inline const ${1:T}& get_${2:name}() const noexcept { return this->$4; }
	inline void set_${2:T}(${1:name} ${3:value}) noexcept { this->$4 = std::move($3); }

snippet accessors
	inline       ${1:T}&  ${2:name}()       noexcept { return this->$3; }
	inline const ${1:T}&  ${2:name}() const noexcept { return this->$3; }
	inline const ${1:T}& c${2:name}() const noexcept { return this->$3; }



#
# doctest - https://github.com/doctest/doctest/blob/master/doc/markdown/stringification.md
#

snippet doctest_stringmaker
	template<>
	struct doctest::StringMaker<${1:T}> {
		static String convert(const $1& ${2:value}) { $9 }
	};



#
# fmt - https://fmt.dev/11.0/api/#formatting-user-defined-types
#

snippet format_as
	inline auto format_as(${1:T} ${2:value}) { $9 }

snippet formatter
	template <>
	struct fmt::formatter<${1:T}> {
		// NOLINTNEXTLINE(readability-convert-member-functions-to-static)
		constexpr auto parse(format_parse_context& ctx) -> format_parse_context::iterator { ${8:return ctx.begin();} }

		auto format(const ${1}& ${2:value}, format_context& ctx) const -> format_context::iterator { $9 }
	};

# TODO: below

# constructors
snippet constructors
	// default constructor and destructor
	$1() = default;
	~$1() = default;

	// copy & move constructors
	$1(const $1&) = default;
	auto operator=(const $1&) -> $1& = default;
	$1($1&&) = default;
	auto operator=($1&&) -> $1& = default;
